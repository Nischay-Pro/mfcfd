module q_lskum_mod

        use q_variables_mod
        use flux_residual_mod
        use state_update_mod
        use DATA_STRUCTURE_MOD_DIFF
        use device_DATA_STRUCTURE_MOD_DIFF
        use point_normals_mod    
        use generate_connectivity_mod
        use post_processing_mod
        use stagnation_values_mod
        use cudafor
        use ieee_arithmetic


        real*8 :: sum_res_sqr, residue, temp2
        real*8, device :: temp
        real*8, device, allocatable :: cost_func_d(:)
        real*8, device, allocatable :: sum_res_sqr_d(:)

contains

        subroutine q_lskum(time)

                implicit none

                ! Grid and block dim
                type(dim3) :: grid , tBlock
                integer :: istat
                integer :: i
                integer :: rk
                real*8 :: start, finish, time

                OPEN(UNIT=301,FILE="residue",FORM="FORMATTED",STATUS="REPLACE",ACTION="WRITE")
                OPEN(UNIT=302,FILE="objective",FORM="FORMATTED",STATUS="REPLACE",ACTION="WRITE")

                call compute_normals()
                call generate_connectivity()
                write(*,*)'%%%%-Normals and connectivity generated-%%%'
                write(*,*)

                write(*,*)'%%%%%%%%%%%%%%%-Setting phi values to 1-%%%%%%%%%%%%%'
                do i=1,max_points
                        point%phi1(:,i) = 1.0d0
                        point%phi2(:,i) = 1.0d0
                enddo

                call cpu_time(start)

                ! Transfer from host device
                call host_to_device()
                
                write(*,*)'%%%%%%%%%-Host to device performed-%%%%%%%%'
                write(*,*)

                allocate(sum_res_sqr_d(max_points))
                allocate(cost_func_d(max_points))

                tBlock = dim3 (blockx, blocky, blockz)
                grid = dim3(ceiling(real(max_points)/ tBlock%x), 1, 1)
                
                write(*,*)'%%%%%%%%%%%%%%%-GPU size info-%%%%%%%%%%%%%'
                write(*,*) 'number of threads per block:',blockx*blocky*blockz
                write(*,*) 'grid dimension:',grid
                write(*,*) 'thread block dimension:',tBlock

                write(*,*)
                write(*,*)'%%%%%%%%%%%%%-Iterations begin-%%%%%%%%%%%%'
                write(*,*)

                if(solution_restart == 0) itr = 0

                istat = cudaDeviceSetCacheConfig(cudaFuncCachePreferL1)

                do it = itr+1, itr+max_iters

                        call eval_timestep<<<grid, tBlock>>>(point_d%x, point_d%nbhs, &
                        & point_d%conn, point_d%delta, point_d%prim, point_d%prim_old)

                        do rk = 1, rks

                                call eval_q_variables<<<grid, tBlock>>>(point_d%prim, point_d%q)

                                call eval_q_derivatives<<<grid, tBlock>>>(point_d%x, point_d%nbhs, &
                                        & point_d%conn, point_d%q, point_d%qm, point_d%dq)

                                call eval_q_double_derivatives<<<grid, tBlock>>>(point_d%x, point_d%nbhs, point_d%conn, &
                                        & point_d%dq, point_d%ddq)

                                if(inner_iterations /= 0) then
                                        do i = 1, inner_iterations

                                                call eval_q_derivatives_inner_loop<<<grid, tBlock>>>(point_d%x, point_d%nbhs, &
                                                        & point_d%conn, point_d%q, point_d%dq, point_d%inner)

                                                call eval_update_innerloop_2<<<grid, tBlock>>>(point_d%dq, point_d%inner)

                                                call eval_dq_derivatives_inner_loop<<<grid, tBlock>>>(point_d%x, point_d%nbhs, &
                                                        & point_d%conn, point_d%q, point_d%dq, point_d%ddq, point_d%inner)

                                                call eval_update_innerloop_3<<<grid, tBlock>>>(point_d%ddq, point_d%inner)
                                                
                                        end do
                                end if

                                call cal_flux_residual<<<grid, tBlock>>>(point_d%x, point_d%nx, &
                                        & point_d%flag, point_d%min_dist, point_d%nbhs, point_d%conn, &
                                        & point_d%xpos_nbhs, point_d%xneg_nbhs, point_d%ypos_nbhs, &
                                        & point_d%yneg_nbhs, point_d%xpos_conn, point_d%xneg_conn,&
                                        & point_d%ypos_conn, point_d%yneg_conn, point_d%prim,  &
                                        & point_d%q, point_d%qm, point_d%dq, point_d%ddq, point_d%flux_res, &
                                        & point_d%phi1, point_d%phi1)

                                call state_update<<<grid, tBlock>>>(point_d%x, point_d%nx, point_d%flag, &
                                        & point_d%nbhs, point_d%conn, point_d%prim, point_d%prim_old, &
                                        & point_d%delta, point_d%flux_res, sum_res_sqr_d, rk)


                        end do

!                       call objective_function_J<<<grid, tBlock>>>(point_d%prim, cost_func_d)


                        istat = cudaGetLastError() 

                        if (istat .ne. 0) then
                                print*, cudaGetErrorString(istat) 
                                stop istat 
                        endif
                        
                        ! Residue norm evaluation
                        
                        temp = 0.0

                        !$cuf kernel do <<< *, * >>>
                        do i = 1, mp_d
                                temp = temp + sum_res_sqr_d(i)
                        end do

                        sum_res_sqr = temp
                        
                        temp2 = 0.0
                        do i = 1, mp_d
                                temp2 = temp2 + cost_func_d(i)
                        end do

                        cost_func = temp2

                        write(*,*) "Objective Function J:", cost_func
                        write(302,*) it, cost_func

                        residue = dsqrt(sum_res_sqr)/max_points

                        if (it .le. 2 .and. solution_restart == 0) then
                                res_old = residue
                                residue = 0.0d0
                        else
                                residue = dlog10(residue/res_old)
                        end if

                        write(*,*) "iterations:", it, "residue:", residue
                        write(301,*) it, residue

                        if(ieee_is_nan(residue))exit
        
                        if(mod(it,nsave) == 0) then
                                write(*,*)'%%%%%%%%%%%%%-Saving solution-%%%%%%%%%%%%%'
                                call device_to_host()
                                call print_primal_output()
                        end if
                enddo

                it = it - 1
                
                call device_to_host()

                write(*,*)
                write(*,*)'%%%%%%%%%-Device to host performed-%%%%%%%%'
                write(*,*)

                istat = cudaDeviceSynchronize()
                if (istat .ne. 0) then
                        print*, cudaGetErrorString(istat) 
                        stop istat 
                endif

                call cpu_time(finish)

                time = finish - start

                CLOSE(UNIT=301)
                CLOSE(UNIT=302)

        end subroutine

end module q_lskum_mod
